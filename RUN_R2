#!/usr/bin/perl

use Fcntl qw(:flock);
use lib '/home/zkronenb/tools/zk_tools/';
use CDR;
use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
use Parallel::ForkManager;
#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

cdr.t -f cdr  -t  10 (number of processors) -o output.txt

Description:



";


my ($help);
my $file;
my $n_threads;
my $output;
my $opt_success = GetOptions('help'      => \$help,
			     "file=s"    => \$file,
			     "output=s"  => \$output,
			     "threads=s" => \$n_threads);


die $usage if $help || ! $opt_success;
die $usage unless $file && $n_threads;
my $cdr = CDR->new('file' => $file);

open(my $FH, '>', "$output.ld.txt") || die "Cannot open $output.ld.txt\n";

#excluding C-rup 

my @indvs = (0..35,37..40);

my @features = @{$cdr->Get_Seqids};

while(@features){
    my @child;
    my @temp_features;
    if (scalar @features > $n_threads){
	for(my $i = 1; $i <= $n_threads; $i++){
	    my $feature = shift @features;
	    push @temp_features, $feature;
	}
    }
    else{
	for(my $i = 1; $i <= scalar @features; $i++){
	    my $feature = shift @features;
	    push @temp_features, $feature;
	}
    }
    Fork_Threads(\@indvs, \@temp_features, $cdr, $FH);
}

close $FH;
#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------

sub Fork_Threads{
    my ($indvs, $f, $cdr, $FH) = @_;
    my $pm = new Parallel::ForkManager($n_threads);
       
  FEATURE: foreach my $feature (@{$f}){
      next FEATURE if ! defined $feature;
      $pm->start and next;
      print STDERR "INFO: Working on $feature\n";
      my @p = $cdr->LD($indvs, $feature);
      if(defined $p[0]){
	  flock($FH, LOCK_EX);
	  print $FH join "\n", @p;
	  print $FH "\n";
	  flock($FH, LOCK_UN);
      }
      $pm->finish;
  }
    $pm->wait_all_children;    
}





