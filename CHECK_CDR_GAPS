#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Tabix;
use Set::IntSpan::Fast;
use Set::IntervalTree;
use Data::Dumper;
use File::Glob ':glob';

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

/home/zkronenb/tools/zk_tools/CHECK_CDR_GAPS -b build.txt  -c file.cdr \*.gvf.gz

Description:

No really, how the hell do you use this thing!

";


my $cdr;
my $build;
my ($help);
my $opt_success = GetOptions('help'       => \$help, 
			     "cdr=s"      => \$cdr,
			     "build=s"    => \$build,
			     );



die $usage if $help || ! $opt_success;
die $usage unless $cdr;


my %BUILD;
my %FEATURES;
my %FILE_KEY;
my @PRAGMA;
my @FILES = @ARGV;

Load_Features();
Parse_Build($build);
Parse_Pragma($cdr);
$cdr = "$cdr\.gz";

my $c_t = Tabix->new(-data=>$cdr);
my @features = $c_t->getnames();

my $total = scalar @features;
my $count = 0;
FEATURE: foreach my $feature (@features){
    next FEATURE unless defined $feature;
    $count++;
    my $gap_by_feature = Build_Trees($feature);
    Process_Results($feature, $gap_by_feature, $count);
}

Print_Pragma();

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------
# Loading Feature IDs to allow for rapid checks if seqid exists

sub Load_Features{
  FILE: foreach my $f (@FILES){
      my $t    = Tabix->new(-data=>$f);
      map {$FEATURES{$f}{$_}++} $t->getnames();
  }
}

#-----------------------------------------------------------------------------
# Loading Binary Tree for rapid lookup.  Looping over each feature.


sub Build_Trees{
    my $feature = shift;
    my $tree = Set::IntervalTree->new;
  FILE: foreach my $f (@FILES){
      my ($fkey) = $f =~ /(.*?)\.gz/; 
      my $t    = Tabix->new(-data=>$f);
      if(! exists $FEATURES{$f}{$feature}){
	  $tree->insert($FILE_KEY{$fkey}, 0, $BUILD{$feature});	  
      }
      else{
	  my $iter = $t->query($feature);
	LINE: while(my $l = $t->read($iter)){
	    chomp $l;
	    my @l = split /\t/, $l;
	    next LINE unless $l[2] eq 'gap';
	    die "$f doesn't match anything in the cdr" if !defined $FILE_KEY{$fkey};
	    $tree->insert($FILE_KEY{$fkey}, $l[3], $l[4])
	    }
      }
  }
    return $tree;
}

#-----------------------------------------------------------------------------
sub Process_Results{
    my($feature, $gap_by_feature) = @_;
    
    print STDERR  "currently: $feature\t $count::$total\n"; 
    my $t    = Tabix->new(-data=>$cdr);
    my $iter = $t->query($feature);
    while(my $l = $t->read($iter)){
	chomp $l;
	my @l = split /\t/, $l;
	foreach my $z (@l){
	    die "This line isn't defined $l" if ! defined $z;
	}  
	my $nocall = Lookup_Indvs_Range($gap_by_feature, $l[1], $l[2]);
	if (defined @{$nocall}[0]){
	    Add_No_Call(\@l, $nocall, $feature);
	}
	else{
	    print "$l\n";
	}
    }
}
#-----------------------------------------------------------------------------
sub Lookup_Indvs_Range{
    my ($tree, $b, $e) = @_;
    my $results = $tree->fetch($b, $e);
    return $results;
}
#-----------------------------------------------------------------------------
sub Add_No_Call {
    my ($l, $nocall, $feature) = @_;
    my $gen = '^:1';
    $gen = '^:^' if $feature !~ /chrY/;

    my $existing_nocall;
    my @nocall_index;
    for(my $i = 6; $i <= scalar @{$l} - 1; $i++){
	if(@{$l}[$i] =~ /\^:\^/){
	    $existing_nocall = @{$l}[$i];
	    push @nocall_index, $i;
	}	
    }

    for my $j (@nocall_index){
	delete @{$l}[$j];
    }

    if(defined $existing_nocall){
	my ($indvs) = split /\|/, $existing_nocall;
	my $e_set = Set::IntSpan::Fast->new();
	$e_set->add_from_string($indvs);
	push @{$nocall}, $e_set->as_array();
	$e_set->empty;
	my $set = Set::IntSpan::Fast->new();
	$set->add(@{$nocall});
	my $formatted_indvs = $set->as_string();
	@{$l}[scalar @{$l}] = "$formatted_indvs|$gen";
	$set->empty();
    }
    else{
	my $set = Set::IntSpan::Fast->new();
	$set->add(@{$nocall});
	my $formatted_indvs = $set->as_string();
	@{$l}[scalar @{$l}] = "$formatted_indvs|$gen";
	$set->empty();
    }
    print join "\t", @{$l};
    print "\n";
}
#-----------------------------------------------------------------------------
sub Parse_Pragma{
    my $file = shift;
    open(FH, '<', $file) || die "cannot open $file\n";
    SLINE: while(my $l = <FH>){
	chomp $l;
	next SLINE unless $l =~ /##/;
	push @PRAGMA, $l;
	if($l =~ /FILE-INDEX/){
	    my @l = split /\t/, $l;
	    $FILE_KEY{$l[3]} = $l[2];
	}
    }
    close FH;
    system "bgzip $file";
    system "tabix -s 1 -b 2 -e 3 $file.gz";
}
#-----------------------------------------------------------------------------
sub Print_Pragma{
    foreach my $l (@PRAGMA){
	print "$l\n";
    }
}
#-----------------------------------------------------------------------------
   
sub Parse_Build{
    my $file = shift;
    print STDERR "Current Stage: Parsing $file file\n";
    open(FH, '<', $file) || die "cannot open $file\n";
    while(my $l = <FH>){
        next if $l =~ /^\s+|#/;                                                                                                                                                      
        my @l = split /\s+/, $l;
        die "$file is not in correct format\n" if scalar @l != 3;
        $BUILD{$l[0]} = $l[2];
    }
}
