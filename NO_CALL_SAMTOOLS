#!/usr/bin/perl

use threads;
use Tabix;
use strict;
use warnings;
use Math::CDF;
use Data::Dumper;
use Set::IntSpan::Fast;
use Getopt::Long;
no autovivification;

my $usage = "

NO-CALL-FILTER -c coverage.gz -g gvf -b built.txt


";

my ($help);
my $bgi_depth;
my $gvf;
my $build;
my $quality = 20;
my $depth = 5;
my $coverage;
my $n_threads = 4;
my $opt_success = GetOptions('help'       => \$help,
                             "depth=s"    => \$depth,
			     "coverage=s" => \$coverage,
			     "gvf=s"      => \$gvf, 
			     "quality=s"  => \$quality,
                             "build=s"    => \$build,
			     "threads=s"  => \$n_threads,
    );

die $usage if $help || ! $opt_success;
die $usage unless defined $gvf && defined $depth && defined $quality && defined $build && defined $coverage; 

my %BUILD;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

Parse_Build($build);
my $gvf_t        = Tabix->new(-data=>$gvf);
my @gvf_features:shared = $gvf_t->getnames();

my $l = scalar @gvf_features;

print "$l\n";
print Dumper @gvf_features;

my %temp;
for(my $i = 0; $i < $l; $i++){
    print "$i\n";
    print "$gvf_features[$i]\n";
    $temp{$gvf_features[$i]}++;
}

my $children = Run_Threads(\%temp);
my @child = @{$children};
foreach my $c (@child){
    my $tmp = waitpid($c, 0);
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------
sub Handel_Run{
    my $feature = shift;
    my $gvf_t       = Tabix->new(-data=>$gvf);
    my $cov_t       = Tabix->new(-data=>$coverage);
    my $gvf_iter    = $gvf_t->query($feature);
    my $cov_iter    = $cov_t->query($feature);
    my $depth_count = Count_Depth($cov_t, $cov_iter);
    my $h_cut       = Estimate_High($depth_count, $feature);
    $cov_iter       = $cov_t->query($feature);
    my $ranges      = Range_Depth($cov_t, $cov_iter, $h_cut, $feature);
    my $gvf_range   = Parse_GVF($gvf_t, $gvf_iter, $feature);
    my $gvf_depth   = Del_Range($ranges, $gvf_range, $feature); 
    Print_Gvf($gvf_depth);
}
#-----------------------------------------------------------------------------
sub Run_Threads{
    my $features = shift;
    my @child;
    foreach my $feature (keys %{$features}){
	my $pid = fork();
	if ($pid){
	    push @child, $pid;
	}
	elsif ($pid == 0){
	    Handel_Run($feature);
	    exit 0;
	}
	else{
	    die "couldn't fork: $!\n";
	}
    }
    return \@child;
}
#-----------------------------------------------------------------------------
    sub Parse_Build{
    my $file = shift;
    print STDERR "Current Stage: Parsing $file file\n";
    open(FH, '<', $file) || die "cannot open $file\n";
    while(my $l = <FH>){
	next if $l =~ /^\s+|#/;
	my @l = split /\s+/, $l;
	die "$file is not in correct format\n" if scalar @l != 3;
	$BUILD{$l[0]} = $l[2];
    }
}
#-----------------------------------------------------------------------------                        
sub Count_Depth{ 
    my $t    = shift;
    my $iter = shift;
    my %depth_count;
    print STDERR "Current Stage: Counting depth\n";
    while(my $l = $t->read($iter)){
	my @l = split /\t/, $l;
	$depth_count{$l[2]}++ if $l[2] > $depth; 
    }
    return \%depth_count;
}  
#-----------------------------------------------------------------------------
sub Estimate_High{
    my $depth_count = shift;
    my $feature     = shift;

    print STDERR "Current Stage: Estimating upper depth cutoff\n";
    my $total_depth;
    while(my ($depth, $count) = each %{$depth_count}){
	$total_depth  += $depth * ($count + 1);
    }
    my $lambda  = $total_depth > 0 ? $total_depth / $BUILD{$feature} : 0;
    my $h_cut = $lambda > 0 ? Math::CDF::qpois(0.98, $lambda) : 0;
    return $h_cut;
}      
#-----------------------------------------------------------------------------
sub Range_Depth{

    my $t       = shift;
    my $iter    = shift;
    my $cut_h   = shift;
    my $feature = shift;

    my $set = Set::IntSpan::Fast->new();   
    my $lpos = 0;

    print STDERR "Current Stage: Ranging gap\n";
    while(my $l = $t->read($iter)){
	my @l = split /\t/, $l;
	if($l[1] != $lpos + 1){
	    my $start = $lpos+1;
	    my $end = $l[1]-1;
	    $set->add_range($start, $end);
	}
	$lpos = $l[1];
	$set->add($l[1]) if $l[2] < $depth || $l[2] > $cut_h;
    }
    if($lpos < $BUILD{$feature}){
	my $start = $lpos + 1;
	my $end = $BUILD{$feature};
	$set->add_range($start, $end); 
    }
    return $set->as_string();
}	
#-----------------------------------------------------------------------------
sub Parse_GVF{
    my $t    = shift;
    my $iter = shift;
    my %gvf;
    while(my $l = $t->read($iter)){
	my ($seqid, $source, $type, $start, $end, $score, $strand, $phase, 
	    $attributes) = split /\t/, $l;
	$gvf{$start}{$end} = "$type\t$source\t$score\t$strand\t$phase\t$attributes";
    }
    return(\%gvf); 
}
#-----------------------------------------------------------------------------
sub Del_Range{  
    my $ranges  = shift;
    my $gvf     = shift;
    my $feature = shift;
    print STDERR "Current Stage: filtering depth\n";
    my @ranges = split /,/, $ranges;
    for my $range (@ranges){
	my @ab_range = $range =~ /-/ ? split /-/, $range : ($range, $range);
	for(my $i = $ab_range[0]; $i <= $ab_range[1]; $i++){
	    delete $gvf->{$i};
	}
	$gvf->{$ab_range[0]}{$ab_range[1]} = "gap\tno_call\t.\t.\t.\tID=$feature:$ab_range[0]:$ab_range[1];";    
    }
    return $gvf;
}
#-----------------------------------------------------------------------------
sub Print_Gvf{

    my $gvf = shift;
    #print Dumper $gvf;
    
}
#-----------------------------------------------------------------------------
sub Validate_Files{

}
#-----------------------------------------------------------------------------



