#!/usr/bin/perl
use strict;
use warnings;
use Math::CDF;
use Tabix;
use PDL;
use PDL::LiteF;
use PDL::Stats::Distr;
use Data::Dumper;
use Statistics::Basic::Mean;
use Set::IntSpan::Fast;
use Getopt::Long;
use Math::Round::Var;
no autovivification;


my $usage = "

Synopsis:

NO_CALL -c bgi.depth.file -g your.gvf -d 5 -q 15 

Description:

I will create no-call data for you on unfiltered gvfs including the low quality SNPs/INDELs. 
Here are important things:

1) Make sure you have coverage information for the entire gvf file you want to no call. 
This script wont throw an error, but unknown depth regions wont be edited. 

2) This scirpt takes the strange BGI depth format:  

>chr1
1 2 3 4 6 0 1 
>chr2
0 0 0 0 0 200

I have a parser \"to_bgi_depth\" in my github tool repository that takes samtools generated depth files
and converts the format.  

";

my ($help);
my $bgi_depth;
my $gvf;
my $quality;
my $depth;
my $coverage;

my $opt_success = GetOptions('help'       => \$help,
                             "depth=s"    => \$depth,
			     "coverage=s" => \$coverage,
			     "gvf=s"      => \$gvf, 
			     "quality=s"  => \$quality,
                             );

die $usage if $help || ! $opt_success;
die $usage unless defined $gvf && defined $depth && defined $quality; 

my %CUTOFF_LOOKUP;
my %SEQIDS;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $gvf_seqids = Tabix->new(-data=>$gvf);
%SEQIDS     = map {$_ => 1}  $gvf_seqids->getnames;

Process_Cut_Off($coverage);
print STDERR "INFO: Finished processing $gvf!\n";


#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------
sub Process_Cut_Off {
    my $file = shift;
    open(FH, '<', $file) || die "cannot open $file for reading!\n";
    $/ = ">";
    my $count = 0;
    while (my $line = <FH>) {
	$count++;
	next if $count ==1;
	my @a = split /\s+/,$line if $line  ne '>';
       	my ($contig) = shift @a;
	pop @a;
	my $lambda  = Cut_Off(\@a);
	my $cutoff  = $CUTOFF_LOOKUP{$lambda};
	print STDERR "INFO: high cutoff: $cutoff\n";
	my $ranges  = No_Call_Pos(\@a, $contig, $cutoff);
	my $gvf_dat = Process_GVF($contig, $ranges);
	Print_Gvf($contig, $gvf_dat) if $gvf_dat != 0;
    }
    close FH;
    $/ = '\n';
}
#-----------------------------------------------------------------------------
sub Cut_Off{        
    my $a      = shift;
    my $sum    = 0;
    my $count  = 0;
    
    next if !defined $a;
    foreach my $b(@{$a}){
	$count++;
	$sum += $b;
    }
    my $rnd = Math::Round::Var->new(0.1);
    my $lambda = $sum / $count if $sum > 0;
    $lambda = 0 if $sum == 0;
    $lambda = $rnd->round($lambda);
    return $lambda if exists $CUTOFF_LOOKUP{$lambda};
    my $pcutoff;
    $pcutoff = Math::CDF::qpois(0.99, $lambda) if $lambda > 0;
    $pcutoff = 0 if $lambda == 0;
    $pcutoff = $rnd->round($pcutoff);
    $CUTOFF_LOOKUP{$lambda} = $pcutoff;
    return $lambda;
}             
#-----------------------------------------------------------------------------
sub No_Call_Pos{
    my $var    = shift;
    my $contig = shift;
    my $pcut   = shift;
    my $count  = 0;
    my @nocall = ();
    my $set = Set::IntSpan::Fast->new();
    foreach my $d (@{$var}){
	$count++;
	push @nocall, $count if $d > $pcut || $d < $depth;
    }
    $set->add(@nocall); 
    return $set;
}
#-----------------------------------------------------------------------------
sub Process_GVF{
    my $feature = shift;
    my $ranges  = shift;
    print STDERR "INFO: Processing: $feature\n";
    

    if(! defined $SEQIDS{$feature}){
	print STDERR "WARN: $feature not found in GVF file\n";
	return 0;
    }

    my $gvf_t   = Tabix->new(-data=>$gvf);
    my $iter    = $gvf_t->query($feature);
    my %gvf_dat;
    
    my $it = $ranges->iterate_runs();
    while (my ( $from, $to ) = $it->()) {
        $gvf_dat{$from}{$to} = "gap\tno_call\t.\t.\t.\tID=$feature:$from:$to;";
    }

    while(my $l = $gvf_t->read($iter)){
	my ($seqid, $source, $type, $start, $end, $score, $strand, $phase, 
	    $attributes) = split /\t/, $l;
	$gvf_dat{$start}{$end} = "$type\t$source\t$score\t$strand\t$phase\t$attributes" if ! defined $ranges->contains_any($start .. $end);
    }
    print STDERR "INFO: Done processing $feature\n";
    return \%gvf_dat;
}

#-----------------------------------------------------------------------------

sub Print_Gvf{

    my $feature = shift;
    my $gvf_dat = shift;
    
  OUTER: while(my($s, $e_hash) = each %{$gvf_dat}){
    INNER: while(my($e, $d) = each %{$gvf_dat->{$s}}){
	my ($type, $source, $score, $strand, $phase, $attributes) = split /\t/, $d;
	if($type ne 'gap'){
	    if($score < $quality){
		$attributes =~ s/Zygosity=.*?;/Zygosity=homozygous;/;
		$attributes =~ s/Variant_seq=.*?;/Variant_seq=^;/;
	    }
	        print "$feature\t$source\t$type\t$s\t$e\t$score\t$strand\t$phase\t$attributes\n"   
		}
	else{
	        print "$feature\t$source\t$type\t$s\t$e\t$score\t$strand\t$phase\t$attributes\n"   
		}
    }
  }
}

#-----------------------------------------------------------------------------
