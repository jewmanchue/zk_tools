#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

/home/zkronenb/tools/zk_tools/RE-RANK-VAAST --beta || --gamma || --mixed ranking.file.txt vaast.simple 

Description:

I take a file generated by SNP-DENSITY-DIFF (zk github) and re-rank a vaast simple file by p-value, followed 
by beta (SNP density difference) or gamma (KA/KS) or mixed (compbined = alpha * beta).  The SNP-DENSITY-DIFFS 
has been edited by [r] to calculate the ecdf.

";


my ($help);
my $beta;
my $gamma;
my $mixed;
my $opt_success = GetOptions('help'     => \$help,
			     'beta'     => \$beta,		     
			     'gamma'    => \$gamma,
			     'mixed'    => \$mixed,
    );

die $usage if $help || ! $opt_success;

my $file = shift;
die $usage unless $file;
open (my $IN, '<', $file) or die "Can't open $file for reading\n$!\n";

my %QUANTILE;

while (<$IN>) {
    chomp;
    $_ =~ s/\"//g;
    next if $_ =~ /gene_name/;
    my @l = split /\t/, $_;
    if($beta){
	$QUANTILE{$l[1]} = $l[-2];
#	print "$l[-2]\n"
    }
    if($gamma){
	$QUANTILE{$l[1]} = $l[-1];
#	print "$l[-2]\n"
    }
    if($mixed){
	my $val = 0;
	if($l[-1] > 0 && $l[-2] > 0){
	    $val = $l[-1] * $l[-2];
	}
	$QUANTILE{$l[1]} = $val;
#	print "val\n";
    }
}

close $IN;
my $file2 = shift;
open (my $FH, '<', $file2) or die "Can't open $file2 for reading\n$!\n";

my %SIMPLE;

while (<$FH>) {
    chomp;
    next if $_ =~ /^RANK/;
    my @l = split /\t/, $_;
    shift @l;
    my $quant = $QUANTILE{$l[0]};
    die "The GFF3 doesn't match between VAAST and the DENSITY GFF;
    $l[0] was not in the density file
    !\n" if ! defined $quant;
    $SIMPLE{$l[1]}{$quant}{$l[0]} = join "\t", @l;
}

close $FH;

my $count = 0;
foreach my $pvals (sort {$a <=> $b} keys %SIMPLE){
    foreach my $quant (sort {$a <=> $b} keys %{$SIMPLE{$pvals}}){
	foreach my $gene (sort {$a cmp $b} keys %{$SIMPLE{$pvals}{$quant}}){
	    $count++;
	    my $line_dat = $SIMPLE{$pvals}{$quant}{$gene};
	    print "$count\t$pvals\t$quant\t$line_dat\n";
	}
    }
}


#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------


