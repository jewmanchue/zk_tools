#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
use List::MoreUtils qw{ uniq };
use Math::Complex;
use Getopt::Long;

#This script will do FST for us using BEAGLE data.


#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

BEAGLE_FST -begal_file -group_file 

Description:

";


my ($help);
my $beagal_file;
my $group_file;

my $opt_success = GetOptions('help'     => \$help,
                             'begal_file=s'    => \$beagal_file,
                             'group_file=s' => \$group_file,
                             );

die $usage if $help || ! $opt_success;
die $usage unless defined $beagal_file && defined $group_file; 

my @TARGET;
Load_Target();
Load_Data();
#--------------------------------------------------------------------------------
sub Load_Data{    
    open(FH,'<',$beagal_file);    
    my @column_names;
    while(my $line = <FH>){
	chomp $line;
	$line = Rtrim($line);
	if ($line =~ m/^I/){
	    my @first_row = split /\t/, $line;
	    @column_names = uniq @first_row;
	    shift @column_names;
	    shift @column_names;
	    next;
	}
	my @genotypes = split /\t/, $line;
	my $crap   = shift @genotypes;
	my @marker_info = split /:/, shift @genotypes;
	my @uniq_bases = sort {$a cmp $b} map {split //, $_} uniq @genotypes;
	next unless scalar @uniq_bases == 2;
	my $total_counts  = Load_Empty_Genotypes(\@uniq_bases);
	my $target_counts = Load_Empty_Genotypes(\@uniq_bases);
	my $target_b_counts = Load_Empty_Genotypes(\@uniq_bases);

	foreach my $col_name (@column_names){
	    my @gens;
	    push @gens, shift @genotypes;
	    push @gens, shift @genotypes;
	    my @s_gens = sort {$a cmp $b} @gens;
	    if (grep {/$col_name/} @TARGET){	
		
		$target_counts->{$s_gens[0].$s_gens[1]}++;
		$total_counts->{$s_gens[0].$s_gens[1]}++;
	    }
	    else{
		$total_counts->{$s_gens[0].$s_gens[1]}++;
		$target_b_counts->{$s_gens[0].$s_gens[1]}++;
	    }  
	}

	my $total_indv    = scalar @column_names;
	my $target_indv   = scalar @TARGET;
	my $target_b_indv = (scalar @column_names) - (scalar @TARGET);
	my $Gt  = H($total_counts, $total_indv);
	my $Gsa = H($target_counts, $target_indv);
	my $Gsb = H($target_b_counts, $target_b_indv);
	#my $Gs  = ($Gsa + $Gsb)/2;
	my $Ca = $target_indv / $total_indv;
	my $Cb = $target_b_indv / $total_indv; 
	my $Gs = ($Ca * $Gsa) + ($Cb * $Gsb); 

	if ($Gt != 0){
	    my $Fst = ($Gt - $Gs)/ $Gt; 
	    print "$marker_info[0]\t$marker_info[1]\t$marker_info[2]\t$Fst\n";

	}
	else{
	    print "$marker_info[0]\t$marker_info[1]\tTri-allelic\n";
	}
    }
    close FH;
}
#-------------------------------------------------------------------------------- 
sub Load_Target{
    open(FH2,'<',$group_file);
    my $count = 0; 
    while(my $line = <FH2>){
        $count++;
	chomp $line;
	my $group = $line if $count == 1;
	push @TARGET, $line if $count > 1;
	print "Group 1 for Fst:\t$group\n" if $count == 1;
    }
}
#-------------------------------------------------------------------------------- 
sub Load_Empty_Genotypes{
    my $uniq_bases = shift;
    my @uniq_bases = @{$uniq_bases};
    my %genotype_count;
    $genotype_count{$uniq_bases[0].$uniq_bases[0]} = 0;
    $genotype_count{$uniq_bases[0].$uniq_bases[1]} = 0;
    $genotype_count{$uniq_bases[1].$uniq_bases[1]} = 0;
    return \%genotype_count;
}
#--------------------------------------------------------------------------------
sub Rtrim{
    my $string = shift;
    $string =~ s/\s+$//;
    $string=~s/\t+/\t/gs;
    $string=~s/\n+/\n/gs;
    $string=~s/ +/ /gs;
    return $string;
}
#-------------------------------------------------------------------------------- 
sub H{    
    my $allele_counts = shift;
    my $total_alleles = 2 * shift;
    my $AA;
    my $Aa;
    my $aa;
    my $p;
    my $q;
    my $count = 0;
    foreach my $key (sort keys %{$allele_counts}){
	$count++;
	$AA  =  $allele_counts->{$key} if $count == 1;
	$Aa  =  $allele_counts->{$key} if $count == 2;
	$aa  =  $allele_counts->{$key} if $count == 3;
    }

    $p = (2*$AA + $Aa) / $total_alleles;
    $q = 1 - $p;
    my $H = 2*$p*$q;
    return $H;  

}


#--------------------------------------------
#------------checks for calcs----------------
#   $q = (2*$aa + $Aa) / $total_alleles;    
#   my $G = $p**2+$q**2;
#   print "count AA: $AA\n";
#   print "count Aa: $Aa\n";
#   print "count aa: $aa\n";
#   print "freq of p: $p\n";
#   print "total alleles: $total_alleles\n"; 
#   print "expected het:  $H\n";

